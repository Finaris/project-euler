"""

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal
numbers are all figurate (polygonal) numbers and are generated by the
following formulae:

Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ...
Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
interesting properties.

The set is cyclic, in that the last two digits of each number is the
first two digits of the next number (including the last number with the
first).

Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and
pentagonal (P5,44=2882), is represented by a different number in the
set. This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers
for which each polygonal type: triangle, square, pentagonal, hexagonal,
heptagonal, and octagonal, is represented by a different number in the set.

"""

from typing import Callable


def generate_numbers_up_to_n(n: int, f: Callable) -> set:
    """ Generates all numbers up to a number n using the provided function f.

    :param n: (int) The number to generate other numbers up to (but not including).
    :param f: (Callable) A function which takes in a sequence number and returns a number.
    :return: (set) A set of all numbers up to n.
    """
    all_numbers, sequence_number, last_number = set(), 1, float('-inf')
    while last_number <= n:
        last_number = f(sequence_number)
        if last_number <= n:
            all_numbers.add(last_number)
        sequence_number += 1
    return all_numbers


def triangular_numbers(n: int) -> set:
    """ Returns a set of all triangular numbers up to (and not including) n.

    :param n: (int) The maximum sequence number.
    :return: (set) A set of triangular numbers.
    """
    return generate_numbers_up_to_n(n, lambda i: i * (i + 1) / 2)


def square_numbers(n: int) -> set:
    """ Returns a set of all square numbers up to (and not including) n.

    :param n: (int) The maximum sequence number.
    :return: (set) A set of square numbers.
    """
    return generate_numbers_up_to_n(n, lambda i: i**2)


def pentagonal_numbers(n: int) -> set:
    """ Returns a set of all pentagonal numbers up to (and not including) n.

    :param n: (int) The maximum sequence number.
    :return: (set) A set of pentagonal numbers.
    """
    return generate_numbers_up_to_n(n, lambda i: i*((3*i)-1)/2)


def hexagonal_numbers(n: int) -> set:
    """ Returns a set of all hexagonal numbers up to (and not including) n.

    :param n: (int) The maximum sequence number.
    :return: (set) A set of hexagonal numbers.
    """
    return generate_numbers_up_to_n(n, lambda i: i*((2*i)-1))


def heptagonal_numbers(n: int) -> set:
    """ Returns a set of all heptagonal numbers up to (and not including) n.

    :param n: (int) The maximum sequence number.
    :return: (set) A set of heptagonal numbers.
    """
    return generate_numbers_up_to_n(n, lambda i: i*((5*i)-3)/2)


def octagonal_numbers(n: int) -> set:
    """ Returns a set of all octagonal numbers up to (and not including) n.

    :param n: (int) The maximum sequence number.
    :return: (set) A set of octagonal numbers.
    """
    return generate_numbers_up_to_n(n, lambda i: i*((3*i)-2))


def find_cyclical_figurate_numbers():
    # Generate all numbers that are needed for verification.
    all_triangle_numbers = triangular_numbers(10000)
    all_square_numbers = square_numbers(10000)
    all_pentagonal_numbers = pentagonal_numbers(10000)
    all_hexagonal_numbers = hexagonal_numbers(10000)
    all_heptagonal_numbers = heptagonal_numbers(10000)
    all_octagonal_number = octagonal_numbers(10000)

    # Aggregate all of the numbers together for a quick check.
    all_numbers = None  # TODO fix this




if __name__ == "__main__":
    inp = None
    out = sum(inp)
    print(out)
